From 891424fe0184ec1570253fffce82edffefe5b384 Mon Sep 17 00:00:00 2001
From: yuminkim <bfyu@naver.com>
Date: Wed, 24 May 2023 12:26:26 +0900
Subject: [PATCH] =?UTF-8?q?230523=20=EC=88=98=EC=97=85?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../kh/project/common/aop/AfterAspect.java    |  28 +++++
 .../kh/project/common/aop/AroundAspect.java   |  50 ++++++++
 .../kh/project/common/aop/BeforeAspect.java   | 115 ++++++++++++++++++
 .../kh/project/common/aop/CommonPointcut.java |  12 ++
 .../model/service/MemberServiceImpl.java      |  13 ++
 .../main/webapp/resources/js/board/comment.js |   2 +-
 06_Framework/boardProject/src/test/log4.xml   |  42 +++++--
 7 files changed, 251 insertions(+), 11 deletions(-)
 create mode 100644 06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/AfterAspect.java
 create mode 100644 06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/AroundAspect.java
 create mode 100644 06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/BeforeAspect.java
 create mode 100644 06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/CommonPointcut.java

diff --git a/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/AfterAspect.java b/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/AfterAspect.java
new file mode 100644
index 0000000..2cf88f5
--- /dev/null
+++ b/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/AfterAspect.java
@@ -0,0 +1,28 @@
+package edu.kh.project.common.aop;
+
+import org.aspectj.lang.annotation.After;
+import org.aspectj.lang.annotation.Aspect;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.core.annotation.Order;
+import org.springframework.stereotype.Component;
+
+@Component
+@Aspect
+public class AfterAspect {
+
+	private Logger logger = LoggerFactory.getLogger(AfterAspect.class);
+	
+	@Order(3)
+	@After("CommonPointcut.serviceImplPointcut()")
+	public void afterLog() {
+		logger.info("--------------------------------------------\n\n");
+		
+		
+	}
+
+	
+	
+	
+
+}
\ No newline at end of file
diff --git a/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/AroundAspect.java b/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/AroundAspect.java
new file mode 100644
index 0000000..8fa4b98
--- /dev/null
+++ b/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/AroundAspect.java
@@ -0,0 +1,50 @@
+package edu.kh.project.common.aop;
+
+
+import org.aspectj.lang.ProceedingJoinPoint;
+import org.aspectj.lang.annotation.Around;
+import org.aspectj.lang.annotation.Aspect;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.core.annotation.Order;
+import org.springframework.stereotype.Component;
+
+@Component
+@Aspect
+public class AroundAspect {
+   
+   // Logger : 로그를 작성할 수 있게하는 객체
+   private Logger logger = LoggerFactory.getLogger(AroundAspect.class);
+   
+   // 전처리, 후처리를 모두 해결하고자 할 때 사용 하는 어드바이스
+   // proceed() 메소드 호출 전  : @Before advice 작성
+   // proceed() 메소드 호출 후  : @After advice 작성
+   // 메소드 마지막에 proceed()의 반환값을 리턴해야함. 
+   @Order(2) 
+   @Around("CommonPointcut.serviceImplPointcut()")
+   public Object aroundServiceLogs(ProceedingJoinPoint pp) throws Throwable {
+      // @Around advice는 JoinPoint Interface가 아닌
+      //  하위 타입인 ProceedingJoinPoint를 사용해야 함.
+      
+      
+      long startMs = System.currentTimeMillis(); // 서비스 시작 시의 ms 값
+      
+      Object obj = pp.proceed(); // 여기가 기준
+      
+      long endMs = System.currentTimeMillis(); // 서비스 종료 시의 ms 값
+      
+      String str = "Running Time : " + (endMs- startMs) + "ms";   
+
+      logger.info(str);
+      
+      return obj;
+      
+   }
+   
+}
+
+
+
+
+
+
diff --git a/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/BeforeAspect.java b/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/BeforeAspect.java
new file mode 100644
index 0000000..5858c42
--- /dev/null
+++ b/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/BeforeAspect.java
@@ -0,0 +1,115 @@
+package edu.kh.project.common.aop;
+
+import java.util.Arrays;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.aopalliance.intercept.Joinpoint;
+import org.aspectj.lang.JoinPoint;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Before;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.core.annotation.Order;
+import org.springframework.stereotype.Component;
+import org.springframework.web.context.request.RequestContextHolder;
+import org.springframework.web.context.request.ServletRequestAttributes;
+
+import edu.kh.project.member.model.dto.Member;
+
+@Component //빈등록
+@Aspect //공통 관심사가 작성된 클래스임을 지정
+		//Pointcut(타겟지정) + Advice(수행할 코드)
+public class BeforeAspect {
+	
+	private Logger logger = LoggerFactory.getLogger(BeforeAspect.class);
+	  
+//	@Before("execution(* edu.kh.project..*Impl*.*(..))") //타겟 수행 전
+	
+	//지정된 클래스.메서드에 @Pointcut() 어노뎉테이션의 내용을 타켓으로 삼음
+	@Order(1) //순서, 하나의 타겟에 대한 여러 advice 수행 시 순서 지정
+	@Before("CommonPointcut.serviceImplPointcut()")
+	public void beforeLog(JoinPoint jp) { //Advice(수행할 코드)
+	
+		//매개변수 JointPoint : AOP의 부가 기능이 적용된 대상의 
+		//		객체, 메서드, 파라미터 정보를 얻을 수 있게 해주는 객체
+		
+		
+		//대상 객체의 간단한 클래스명의(패키지명 제외)
+		String className= jp.getTarget().getClass().getSimpleName();
+		
+		//메서드 선언부(== 메서드 시그니처) 에서 메서드명만 얻어옴
+		String methodName = jp.getSignature().getName();
+		
+		String str = "-------------------------------------------------------\n";
+		
+		str += "[Start] : " + className + " - " + methodName + "()\n";
+		//[Start] : MemberServiceImpl  - login()
+		
+		
+		//jp.getArgs() : 파라미터 묶음(배열)
+		str += "[Parameter] : " + Arrays.toString(jp.getArgs()) + "\n";
+		
+		   try {
+		         // 접속자 IP 얻어오기
+		         HttpServletRequest req = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();
+		         Member loginMember = (Member)req.getSession().getAttribute("loginMember");
+		         
+		         str += "[ip]" + getRemoteAddr(req);
+		         if(loginMember != null) {
+		            str += "(email:" + loginMember.getMemberEmail() + ")";
+		         }
+		      }catch (Exception e) {
+		         str += "[스프링 스케쥴러]";
+		      }
+		
+		
+		logger.info(str);
+		
+	}
+		   public static String getRemoteAddr(HttpServletRequest request) {
+
+		        String ip = null;
+
+		        ip = request.getHeader("X-Forwarded-For");
+
+		        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) { 
+		            ip = request.getHeader("Proxy-Client-IP"); 
+		        } 
+
+		        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) { 
+		            ip = request.getHeader("WL-Proxy-Client-IP"); 
+		        } 
+
+		        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) { 
+		            ip = request.getHeader("HTTP_CLIENT_IP"); 
+		        } 
+
+		        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) { 
+		            ip = request.getHeader("HTTP_X_FORWARDED_FOR"); 
+		        }
+
+		        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) { 
+		            ip = request.getHeader("X-Real-IP"); 
+		        }
+
+		        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) { 
+		            ip = request.getHeader("X-RealIP"); 
+		        }
+
+		        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) { 
+		            ip = request.getHeader("REMOTE_ADDR");
+		        }
+
+		        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) { 
+		            ip = request.getRemoteAddr(); 
+		        }
+
+		      return ip;
+		   }
+		
+	}
+	
+	
+
+
diff --git a/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/CommonPointcut.java b/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/CommonPointcut.java
new file mode 100644
index 0000000..4236a87
--- /dev/null
+++ b/06_Framework/boardProject/src/main/java/edu/kh/project/common/aop/CommonPointcut.java
@@ -0,0 +1,12 @@
+package edu.kh.project.common.aop;
+
+import org.aspectj.lang.annotation.Pointcut;
+
+//Pointcuts을 모아둘 서비스
+public class CommonPointcut {
+
+	@Pointcut("execution(* edu.kh.project..*Impl*.*(..))")
+	public void serviceImplPointcut() {}
+	
+	
+}
diff --git a/06_Framework/boardProject/src/main/java/edu/kh/project/member/model/service/MemberServiceImpl.java b/06_Framework/boardProject/src/main/java/edu/kh/project/member/model/service/MemberServiceImpl.java
index 5a29f66..df38dd4 100644
--- a/06_Framework/boardProject/src/main/java/edu/kh/project/member/model/service/MemberServiceImpl.java
+++ b/06_Framework/boardProject/src/main/java/edu/kh/project/member/model/service/MemberServiceImpl.java
@@ -1,5 +1,10 @@
 package edu.kh.project.member.model.service;
 
+
+
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.stereotype.Service;
@@ -12,6 +17,9 @@ import edu.kh.project.member.model.dto.Member;
 		// 비즈니스 로직(데이터 가공, DAO호출, 트랜잭션 제어)처리하는 클래스라 명시
 		// + Bean 등록하는 어노테이션
 public class MemberServiceImpl implements MemberService{
+	
+	//org.slf4j.Logger : 로그 작성 객체
+	private Logger logger =  LoggerFactory.getLogger(MemberServiceImpl.class);
 
 	// @Autowired : 작성된 필드와
 	// Bean으로 등록된 객체 중 타입이 일치하는 Bean을
@@ -30,6 +38,11 @@ public class MemberServiceImpl implements MemberService{
 	@Override
 	public Member login(Member inputMember) {
 		
+		//로그출력
+		logger.info("MemberService.login()실행");  //정보출력
+		logger.debug("MemberEmail :" + inputMember.getMemberEmail());
+		logger.warn("경고용도");
+		
 		// 암호화 추가 예정
 //		System.out.println("암호화 확인 : " + bcrypt.encode(inputMember.getMemberPw()));
 		
diff --git a/06_Framework/boardProject/src/main/webapp/resources/js/board/comment.js b/06_Framework/boardProject/src/main/webapp/resources/js/board/comment.js
index 3cba4ef..82b25b2 100644
--- a/06_Framework/boardProject/src/main/webapp/resources/js/board/comment.js
+++ b/06_Framework/boardProject/src/main/webapp/resources/js/board/comment.js
@@ -33,7 +33,7 @@ function selectCommentList(){
             // 답글일 경우 child-comment 클래스 추가
             if(comment.parentNo != 0)  commentRow.classList.add("child-comment");
 
-
+[]
             // 작성자
             const commentWriter = document.createElement("p");
             commentWriter.classList.add("comment-writer");
diff --git a/06_Framework/boardProject/src/test/log4.xml b/06_Framework/boardProject/src/test/log4.xml
index 45d40d1..bc9ba0d 100644
--- a/06_Framework/boardProject/src/test/log4.xml
+++ b/06_Framework/boardProject/src/test/log4.xml
@@ -1,18 +1,40 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
+<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
 <log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
 
-	<!-- Appenders -->
-	<appender name="console" class="org.apache.log4j.ConsoleAppender">
-		<param name="Target" value="System.out" />
-		<layout class="org.apache.log4j.PatternLayout">
-			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
-		</layout>
-	</appender>
+   <!-- Appenders -->
+   <appender name="console" class="org.apache.log4j.ConsoleAppender">
+      <param name="Target" value="System.out" />
+      <layout class="org.apache.log4j.PatternLayout">
+         <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} [%p] %m%n" />
+      </layout>
+   </appender>
+
+   
+   <!-- //날짜별 로그 파일 생성 하기 -->
+   <appender name="dailyRollingFile" class="org.apache.log4j.DailyRollingFileAppender">
+       <param name="File" value="C:/logs/runtime.log" />
+       <param name="Append" value="true" />
+       <param name="encoding" value="UTF-8" />
+       <param name="DatePattern" value="'.'yyyy-MM-dd" />
+       <layout class="org.apache.log4j.PatternLayout">
+         <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} [%p] %m%n" />
+      </layout>
+   </appender>
+	
+	<!-- log level
+	
+	trace -> debug -> info -> warn -> error -> fatal
+	
+	
+	 -->
+	
+	
 	
 	<!-- Application Loggers -->
 	<logger name="edu.kh.project">
-		<level value="info" />
+		<level value="debug" />
+		<appender-ref ref="dailyRollingFile" />
 	</logger>
 	
 	<!-- 3rdparty Loggers -->
@@ -34,7 +56,7 @@
 
 	<!-- Root Logger -->
 	<root>
-		<priority value="info" />
+		<priority value="debug" />
 		<appender-ref ref="console" />
 	</root>
 	
-- 
2.39.1.windows.1

