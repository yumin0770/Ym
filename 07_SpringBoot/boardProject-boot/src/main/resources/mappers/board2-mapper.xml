<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.board.model.dao.BoardMapper2">

<!-- Board DTO에 대한 resultMap -->
<resultMap type="Board" id="board_rm">
		<id property="boardNo" column="BOARD_NO"/>
		<result property="boardTitle" column="BOARD_TITLE"/>
		<result property="boardContent" column="BOARD_CONTENT"/>
		<result property="boardCreateDate" column="B_CREATE_DATE"/>
		<result property="boardUpdateDate" column="B_UPDATE_DATE"/>
		<result property="readCount" column="READ_COUNT"/>
		<result property="commentCount" column="COMMENT_COUNT"/>
		<result property="likeCount" column="LIKE_COUNT"/>
		<result property="memberNickname" column="MEMBER_NICKNAME"/>
		
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="profileImage" column="PROFILE_IMG"/>
		
		<result property="thumbnail" column="THUMBNAIL"/>
		
		
		
	</resultMap>
	
	<!-- 보드이미지 -->
	
	<resultMap type="BoardImage" id="boardImage_rm">
	
		<id property="imageNo" column="IMG_NO"/>
		<result property="imagePath" column="IMG_PATH"/>
		<result property="imageReName" column="IMG_RENAME"/>
		<result property="imageOriginal" column="IMG_ORIGINAL"/>
		<result property="imageOrder" column="IMG_ORDER"/>
	
	</resultMap>


   <!-- Comment resultMap -->
   <resultMap type="Comment" id="comment_rm">
      <id property="commentNo" column="COMMENT_NO"/>
      <result property="commentContent" column="COMMENT_CONTENT"/>
      <result property="commentCreateDate" column="C_CREATE_DATE"/>
      <result property="boardNo" column="BOARD_NO"/>
      <result property="memberNo" column="MEMBER_NO"/>
      <result property="commentDeleteFlag" column="COMMENT_DEL_FL"/>
      <result property="parentNo" column="PARENT_NO"/>
      <result property="memberNickname" column="MEMBER_NICKNAME"/>
      <result property="profileImage" column="PROFILE_IMG"/>
   </resultMap>
   
  
<!-- 게시글 삽입 -->
<!-- 

 	useGeneratedKeys 속성: DB내부적으로 생성한 키(시퀀스)를 
 		전달된 파라미터의 필드로 대입 가능 여부 지정

	**동적 SQL ***
	-프로그램 수행 중 sQL의 변경하는 기능(마이바티스의 가장 강력한 기능)
	
	<selectKey> 태그 : INSERT/UPDATE 시 사용할 키 (시퀀스)를 조회해서 지정된 필드에 대입

 	order = "BEFORE" :메인 SQL이 수행되기 전/후에 selectKey가 수행되도록 지정
 	전: BEFORE
 	후: AFTER 
 	
 	keyProperty 속성 : selectKey 조회 결과를 저장할 파라미터의의 필드 
		
 -->

<insert id="boardInsert" parameterType="Board" useGeneratedKeys="true">

	
	<selectKey order = "BEFORE" resultType="_int" keyProperty = "boardNo">
		SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
	</selectKey>

	INSERT INTO BOARD 
      VALUES( #{boardNo},
              #{boardTitle},
              #{boardContent},
              DEFAULT, DEFAULT, DEFAULT, DEFAULT, #{memberNo}, 
              #{boardCode})	
</insert>

<!-- 동적 SQL 중 <foreach> 
      - 특정 SLQ 구문을 반복할 때 사용
      - 반복되는 사이에 구분자(separator)를 추가할 수 있음.
      
      collection : 반복할 객체의 타입 작성(list, set, map...)
      item : collection에서 순차적으로 꺼낸 하나의 요소를 저장하는 변수
      index : 현재 반복 접근중인 인덱스 (0,1,2,3,4 ..)
      
      open : 반복 전에 출력할 sql
      close : 반복 종료 후에 출력한 sql
      
      separator : 반복 사이사이 구분자
    -->
	
	<!-- 이미지 리스트(여러 개) 삽입 -->
	<insert id="insertImageList" parameterType="list">
		INSERT INTO "BOARD_IMG" 
		SELECT SEQ_IMG_NO.NEXTVAL, A.*
		FROM (
		
			<foreach collection="list" item="img" separator=" UNION ALL ">
				SELECT  #{img.imagePath} IMG_PATH, 
						#{img.imageReName} IMG_RENAME, 
						#{img.imageOriginal} IMG_ORIGINAL,
				        #{img.imageOrder} IMG_ORDER, 
				        #{img.boardNo} BOARD_NO
				FROM DUAL
			</foreach>	
		) A
	</insert>
	
	
	<update id="boardUpdate">
	UPDATE "BOARD" SET 
	BOARD_TITLE =  #{boardTitle},
	BOARD_CONTENT = #{boardContent},
	B_UPDATE_DATE = SYSDATE
	WHERE BOARD_CODE = #{boardCode}
	AND BOARD_NO =  #{boardNo}
	</update>
	
	
	<!-- 이미지 삭제 -->
	<delete id="imageDelete">
	DELETE FROM "BOARD_IMG"
	WHERE BOARD_NO = #{boardNo}
	AND IMG_ORDER IN(${deleteList})
	
	</delete>
	
	<update id="imageUpdate">
		UPDATE "BOARD_IMG" SET
		IMG_PATH = #{imagePath},
		IMG_ORIGINAL = #{imageOriginal},
		IMG_RENAME = #{imageReName}
		WHERE BOARD_NO = #{boardNo}
		AND IMG_ORDER = #{imageOrder}
	</update>
	
	<!-- 이미지 삽입  -->
	<insert id="imageInsert">
	INSERT INTO "BOARD_IMG"
	VALUES(SEQ_IMG.NEXTVAL,	#{imagePath}, #{imageReName}, 
		#{imageOriginal}, #{imageOrder}, #{boardNo} )
	
	</insert>
	
	<!-- 게시글 삭제 -->
	<update id="boardDelete">
	UPDATE "BOARD" SET 
	BOARD_DEL_FL = 'Y'
	WHERE BOARD_CODE = #{boardCode}
	AND BOARD_NO =  #{boardNo}
	</update>
	
     <!-- 특정 게시판의 삭제되지 않고, 검색 조건이 일치하는 게시글 수 조회 -->
     <select id="getListCount_search" resultType="_int">
      SELECT COUNT(*) 
      FROM "BOARD"
      
      <!-- 작성자 검색 -->
      <if test='key == "w"'>
         JOIN "MEMBER" USING(MEMBER_NO)
      </if>
      
      WHERE BOARD_DEL_FL = 'N'
      AND BOARD_CODE = #{boardCode}
      
      <choose>
         
         <when test='key == "t"'>
            <!-- 제목 -->
            AND BOARD_TITLE LIKE '%${query}%'
         </when>
         
         <when test='key == "c"'>
            <!-- 내용 -->
            AND BOARD_CONTENT LIKE '%${query}%'
         </when>
         
         <when test='key == "tc"'>
            <!-- 제목 + 내용 -->
            AND (BOARD_CONTENT LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
         </when>
         
         <when test='key == "w"'>
            <!-- 작성자(닉네임) -->
            AND MEMBER_NICKNAME LIKE '%{query}%'
         </when>
         
      </choose>
     </select>
     
     
     
     
     <!-- CDATA 태그 : 해당 태그 내부에 작성된 것은 모두 문자로 취급 -->
     <!-- 게시글 목록 조회 -->
     <select id="selectBoardList_search" resultMap="board_rm">
        SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT, 
         
         <![CDATA[
         CASE  
            WHEN SYSDATE - B_CREATE_DATE < 1/24/60
            THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
            WHEN SYSDATE - B_CREATE_DATE < 1/24
            THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60) || '분 전'
            WHEN SYSDATE - B_CREATE_DATE < 1
            THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24) || '시간 전'
            ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
         END B_CREATE_DATE,
         ]]>
            
         (SELECT COUNT(*) FROM "COMMENT" C
          WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
         (SELECT COUNT(*) FROM BOARD_LIKE L
          WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
         (SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
         WHERE I.BOARD_NO = B.BOARD_NO
         AND IMG_ORDER = 0) THUMBNAIL
      FROM "BOARD" B
      JOIN "MEMBER" USING(MEMBER_NO)
      WHERE BOARD_DEL_FL = 'N'
      AND BOARD_CODE = #{boardCode}
      
      <choose>
         
         <when test='key == "t"'>
            <!-- 제목 -->
            AND BOARD_TITLE LIKE '%${query}%'
         </when>
         
         <when test='key == "c"'>
            <!-- 내용 -->
            AND BOARD_CONTENT LIKE '%${query}%'
         </when>
         
         <when test='key == "tc"'>
            <!-- 제목 + 내용 -->
            AND (BOARD_CONTENT LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
         </when>
         
         <when test='key == "w"'>
            <!-- 작성자(닉네임) -->
            AND MEMBER_NICKNAME LIKE '%{query}%'
         </when>
         
      </choose>
      
      ORDER BY BOARD_NO DESC
     </select>
     
		<!-- 헤더 검색 -->
	<select id="headerSearch" resultType="map">
		SELECT * FROM(
			SELECT BOARD_NO, BOARD_TITLE, READ_COUNT, BOARD_CODE, BOARD_NAME 
			FROM "BOARD"
			JOIN "BOARD_TYPE" USING(BOARD_CODE)
			WHERE BOARD_TITLE LIKE '%${query}%'
			AND BOARD_DEL_FL = 'N'
			ORDER BY READ_COUNT DESC, BOARD_NO DESC)
		<![CDATA[ WHERE ROWNUM <= 10  ]]>
	</select>

	
	<select id="selectImageListAll" resultType="string">
		SELECT IMG_RENAME FROM BOARD_IMG
	</select>
	
	
	
</mapper>
